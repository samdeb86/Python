# Function to print a section header
def print_section_header(header_text):
    """
    This function prints a section header with a specified header text. 
    It consists of a border of "~" characters and the header text enclosed in "***".
    
    :param header_text: The text to be displayed in the section header.
    """
    border = "~" * 50
    print(f"{border}\n{' ' * 15}*** {header_text} ***\n{border}\n")


# Introduction
# calling the print_section_header function to add lines for visual clarity
print_section_header("Python Namespace")





# Section 1: Scope of an object
"""
Note - 
Scope refers to the coding region from which a particular Python object is accessible.
Access to an object is determined by the scope of the object itself.

Example:
"""
print("Scope of Objects in Python:\n")
# Global variable
global_var = 10

def some_function():
    """
    This function demonstrates the scope of objects in Python.
    It showcases the accessibility of local and global variables within functions.
    """
    # Local variable
    local_var = 5
    print("Inside the some_function :-")

    print(f"\tAccessing global_var: \t{global_var}")
    print(f"\tAccessing local_var: \t{local_var}")
    
    def some_inner_func():
        """ 
        Nested Local variable scope in some_inner_func's namespace
        """
        nested_local_var = 7
        # You can't access it outside some_inner_func
        print(f"\tAccessing nested_var: \t{nested_local_var}")
    # calling some_inner_func()
    some_inner_func()

# Accessing global_var
print(f"Outside the function :- \n\tAccessing global_var: \t{global_var}\n")

# Calling the example_function
some_function()

# calling the print_section_header function to add lines for visual clarity 
print_section_header(f"{' *** '*3}")





# Section 2: Global keyword
print("2. Global keyword testing:\n")
count = 5

def some_method():
    """
    This function increments a global variable 'count'.
    It showcases the usage of the 'global' keyword to modify a global variable within a function.
    """
    global count    # You can access this variable outside the function
    print(f"Count : {count}")
    count += 1

# Calling the some_method function
some_method()

# printing the updated count outside the function
print(f"Updated count: {count}")

# calling the print_section_header function to add lines for visual clarity
print_section_header(f"{' *** '*3}")
