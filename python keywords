# importing all the keywords in python
import keyword

# Function to print a section header
def print_section_header(header_text):
    """
    This function prints a section header with a specified header text. 
    It consists of a border of "~" characters and the header text enclosed in "***".
    :param header_text: The text to be displayed in the section header.
    """
    border = "~" * 50
    print(f"{border}\n{' ' * 15}*** {header_text} ***\n{border}\n")





# 0. Introduction
# calling the print_section_header function to add lines for visual clarity
print_section_header("Python Keywords")





# 1. List of Keywords
print("1. The list of keywords is : ")
print()

# 'keyword.kwlist' contains all the reserved keywords in python
print(keyword.kwlist)
# '\t' is used for a horizontal tab
# calling the print_section_header function to add lines for visual clarity
print_section_header("\t\t")





# 2. 'True', 'False', and 'None' keywords
print("2. This is True, False, None testing : \n")

# True = 1 and False = 0
print(f"False == 0: {False == 0}")
print(f"True == 1: {True == 1}")

print(f"True + True + True: {True + True + True}")
print(f"True + False + False: {True + False + False}")

# None is not 0
print(f"None == 0: {None == 0}")

# It is impossible to create multiple None objects and assign them to variables
print(f"None == []: {None == []}")

# calling the print_section_header function to add lines for visual clarity
print_section_header("\t\t")





# 3. 'and', 'or', 'not', 'in', 'is' keywords
print("3. This is 'and', 'or', 'not', 'in', 'is' testing : \n")

# Showing logical operations
# or (returns True)
print(f"True or False: {True or False}")

# Showing logical operations
# and (returns False)
print(f"True and False: {True and False}")

# Showing logical operations
# not (returns False)
print(f"not True: {not True}")

# Using "in" to check
if 's' in "geeksforgeeks":
    print("s is part of geeksforgeeks")
else:
    print("s is not part of geeksforgeeks")

# Using "in" to loop through
for char in 'geeksforgeeks':
    print(char, end=" ")

# Using "\r" to move the cursor to the beginning of the current line
print("\r")

# Using "is" to check object identity
# string is immutable (cannot be changed once allocated)
# hence occupy the same memory location
print(f"' ' is ' ': {' ' is ' '}")

# Using "is" to check object identity
# dictionary is mutable (can be changed once allocated)
# hence occupy different memory locations
print("{} is {}:",{} is {})

# calling the print_section_header function to add lines for visual clarity
print_section_header("\t\t")





# 4. Iteration keywords 'for', 'while', 'break', 'continue'
print("4. This is 'for', 'while', 'break', 'continue'  testing : \n")

# Using for loop
print("Using for loop:")
for i in range(10):
    print(i, end=" ")
    # break the loop as soon it sees 6
    if i == 6:
        break

print()

# Using while loop
print("Using while loop:")
i = 0
while i <= 10:
    # if i is equals to 6 continue to next iteration without printing
    if i == 6:
        i += 1
        continue
    else:
        # otherwise print the value of i
        print(i, end=" ")
    i += 1

print("\n")

# calling the print_section_header function to add lines for visual clarity
print_section_header("\t\t")





# 5. Conditional keywords - if, else, elif
print("5. This is if, else, elif testing : \n")

i = 20
if i == 10:
    print("i is 10")
elif i == 20:
    print("i is 20")
else:
    print("i is not present")

# calling the print_section_header function to add lines for visual clarity
print_section_header("\t\t")





# 6. 'def', 'return', 'yield' keywords
print("6. This is 'def', 'return', 'yield' testing : \n")

# 'def' keyword
def fun():
    print("Inside Function \n")

# Calling The Function 'fun()'
fun()

# 'return' keyword 
# use to return result from the function
def sum_of_first_10_numbers():
    s = 0
    for i in range(1, 11):
        s += i
    return s

print(f"Sum of first 10 natural numbers: {sum_of_first_10_numbers()}\n")

# 'yield' keyword 
# used like return statment but is used to return a generator
def generate_sum_of_numbers():
    s = 0
    for i in range(1, 11):
        s += i
        yield s

print("Generated sums:")
for i in generate_sum_of_numbers():
    print(i)

# calling the print_section_header function to add lines for visual clarity
print_section_header("\t\t")




print("\t**********Not finished**********")
print()
